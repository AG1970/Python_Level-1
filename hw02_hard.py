__author__ = 'Александр Гайкалов'

# Задание-1: уравнение прямой вида y = kx + b задано в виде строки.
# Определить координату y точки с заданной координатой x.

equation = "y = -12x + 11111140.2121"
x = 2.5
# вычислите и выведите y

# Преобразование строки в список
lst = equation.split(" ")

#Избавление от символа переменной х
k = str(lst[2]) 
lst[2] = k[:-1]

# Вычисление y
y = float(lst[2]) * x + float(lst[4]) 

print("Задание-1. Уравнение прямой\n")
print("В уравнении", equation)
print("При х =", x)
print("y =", y) 
print("-"*20) #Разделитель между задачами


# Задание-2: Дата задана в виде строки формата "dd.mm.yyyy".
# Проверить, корректно ли введена дата.
# Условия корректности:
# 1. День должен приводиться к целому числу в диапазоне от 1 до 30(31)
#  (в зависимости от месяца, февраль не учитываем)
# 2. Месяц должен приводиться к целому числу в диапазоне от 1 до 12
# 3. Год должен приводиться к целому положительному числу в диапазоне от 1 до 9999
# 4. Длина исходной строки для частей должна быть в соответствии с форматом 
#  (т.е. 2 символа для дня, 2 - для месяца, 4 - для года)

# Пример корректной даты
date = "01.11.1985"

# Примеры некорректных дат
date = "01.22.1001"
date = "1.12.1001"
date = "-2.10.3001"

print("\nЗадание-2. Корректность ввода даты\n")
date = input("Введите дату через через точку в формате dd.mm.yyyy: ") 

# Преобразование даты в список
sliced_date = date.split(".") 
pull_day = int(sliced_date[0]) 
pull_month = int(sliced_date[1]) 
pull_year = int(sliced_date[2]) 

# Дополнительное условие для проверки месяцев с 31-м днём
long_month = [1, 3, 5, 7, 8, 10, 12] 

# Проверка на условия корректности даты
if len(sliced_date[0]) != 2 or len(sliced_date[1]) != 2 or len(sliced_date[2]) != 4: 
    print("Дата не сооответствует формату dd.mm.yyyy")
elif pull_year > 9999 or pull_year < 1: 
    print("Некорректный год")
elif pull_month > 12 or pull_month < 1: 
    print("Некорректный месяц")     
elif pull_day > 31 or pull_day < 1 or (pull_month not in long_month and pull_day > 30): 
    print("Некорректный день") 
else: 
    print("Дата введена корректно")

print("-"*20) #Разделитель между задачами

# Задание-3: "Перевёрнутая башня" (Задача олимпиадного уровня)
#
# Вавилонцы решили построить удивительную башню —
# расширяющуюся к верху и содержащую бесконечное число этажей и комнат.
# Она устроена следующим образом — на первом этаже одна комната,
# затем идет два этажа, на каждом из которых по две комнаты, 
# затем идёт три этажа, на каждом из которых по три комнаты и так далее:
#         ...
#     12  13  14
#     9   10  11
#     6   7   8
#       4   5
#       2   3
#         1
#
# Эту башню решили оборудовать лифтом --- и вот задача:
# нужно научиться по номеру комнаты определять,
# на каком этаже она находится и какая она по счету слева на этом этаже.
#
# Входные данные: В первой строчке задан номер комнаты N, 1 ≤ N ≤ 2 000 000 000.
#
# Выходные данные:  Два целых числа — номер этажа и порядковый номер слева на этаже.
#
# Пример:
# Вход: 13
# Выход: 6 2
#
# Вход: 11
# Выход: 5 3

print("\nЗадание-3. Поиск квартиры в Вавилонской башне\n")
N = int(input("Введите номер искомой квартиры N: "))

# Башня состоит из уровней, на каждом из которых
# количество входящих в уроыень этажей и число квартир на этаже равно номеру уровня

# Поиск уровня с квартирой номер N начнем с самого низа:

level = 0 # номер уровня
top_floor = 0 # номер верхнего этажа
right_corner_flat = 0 # номер квартиры в "правом верхнем углу", это макисмальный номер квартиры

# Ищем нужный уровень
while right_corner_flat < N:
     level  += 1
     right_corner_flat += level  * level
     top_floor += level

# Ищем нужный этаж и номер самой правой квартиры на этом этаже    
while (right_corner_flat - level) > N:
    top_floor -= 1
    right_corner_flat -= level

# Ищем на найденом этаже положение целевой квартиры - слева-направо  
position = 1
while (right_corner_flat - level + position) < N:
    position += 1

print ('{}-я квартира слева на {}-м этаже'.format(position, top_floor))




